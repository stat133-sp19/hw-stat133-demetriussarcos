---
title: "Working Code Wkout03"
author: "Demetrius Sarcos"
date: "4/29/2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


## Private Functions
### Checker Functions
#### check_prob()

```{r}
# Title: check_prob
# Description: tests if input "prob" is a valid probability value (i.e. 0 ≤ p ≤ 1)
# Inputs
#   prob: a vector of probabilities
# Output
#   TRUE if "prob" is a valid probability value and an error message otherwise

check_prob <- function(prob) {
  if (is.numeric(prob) == FALSE) {
    stop("\ninvalid prob value; prob must be numeric")
  }
  if (any(prob < 0 | prob > 1)) {
    stop("\ninvalid prob value; p has to be a number betwen 0 and 1")
  }
  TRUE
}
```

#### check_trials()

```{r}
# Title: check_trials
# Description: tests if input "trial" is a valid value for number of trials (i.e. n is a non-negative integer)
# Inputs
#   trials: a vector of length 1 for number of trials
# Output
#   TRUE if "trial" is a valid value for number of trials and an error message otherwise

check_trials <- function(trials) {
  if ((trials %% 1) != 0) {
    stop("\ninvalid trials value; trials must be a non-negative integer")
  }
  if (trials < 0) {
    stop("\ninvalid trials value; trials must be a non-negative integer")
  }
  if (length(trials) != 1) {
    stop("\ninvalid trials value; trials must be a non-negative integer")
  }
  TRUE
}
```

#### check_success()

```{r}
# Title: check_success
# Description: tests if input "success" is a valid value for number of successes (i.e. 0 ≤ k ≤ n)
# Inputs
#   success: a vector of non-negative integer(s) for number of succcess
#   trials: a vector of non-negative integer(s) for number of trials
# Output
#   TRUE if success is a valid value for number of successes and an error message otherwise

check_success <- function(success, trials) {
  if (any(success) > trials) {
    stop("\ninvalid success value; success cannot be greater than trials")
  }
  if ((success %% 1) != 0) {
    stop("\ninvalid success value; success must be a vector of non-negative integers")
  }
  if (any(success < 0)) {
    stop("\ninvalid success value; success must be a vector of non-negative integers")
  }
  TRUE
}

any(v>t)
v <- c(0,3,7,15,50)
t <- 30

```

### Auxiliary Functions

#### aux_mean()

```{r}
# Title: aux_mean
# Description: computes the expected value or mean of a binomial distribution
# Inputs
#   prob: a vector of probabilities
#   trials: a vector of non-negative integer(s) for number of trials
# Output
#   Computed mean for a binomial distribution

aux_mean <- function(prob, trials) {
  prob * trials
}
```

#### aux_variance

```{r}
# Title: aux_mean
# Description: computes the variance of a binomial distribution
# Inputs
#   prob: a vector of probabilities
#   trials: a vector of non-negative integer(s) for number of trials
# Output
#   Computed variance of a binomial distribution

aux_variance <- function(prob, trials) {
  trials * prob * (1 - prob)
}
```


#### aux_mode()

```{r}
# Title: aux_mode
# Description: computes the mode of a binomial dstributon
# Inputs
#   prob: a vector of probabilities
#   trials: a vector of non-negative integer(s) for number of trials
# Output
#   Computed mode of a binomial distribution
```

#### aux_skewness()

```{r}
# Title: aux_skewness
# Description: computes the skewness of a binomial dstributon
# Inputs
#   prob: a vector of probabilities
#   trials: a vector of non-negative integer(s) for number of trials
# Output
#   Computed skewness of a binomial distribution

aux_skewness <- function(prob, trials) {
  (1 - (2 * prob)) / sqrt(trials * prob * (1 - prob))
}
```

#### aux_kurtosis()

```{r}
# Title: aux_kurtosis
# Description: computes the kurtosis of a binomial dstributon
# Inputs
#   prob: a vector of probabilities
#   trials: a vector of non-negative integer(s) for number of trials
# Output
#   Computed kurtosis of a binomial distribution

aux_kurtosis <- function(prob, trials) {
  (1 - ((6 * prob) * (1 - prob))) / (trials * prob * (1 - prob))
}
```


```{r}
# Roxygen comments for copying
#' @title
#' @description
#' @param
#' @param
#' @param
#' @return
#' @examples
```


## Main Functions
#### bin_choose()

```{r}
#' @title bin_choose
#' @description calculates the number of combinations in which k successes can occur in n trials
#' @param n number of trials
#' @param k number of successes
#' @return computed number of trials
#' @examples
#' bin_choose(n = 5, k = 2)
#' bin_choose(5, 0)
#' bin_choose(5, 1:3)
#' @export

bin_choose <- function(n, k) {
  if (k > n) {
    stop("\nk cannot be greater than n")
  }
  factorial(n) / ((factorial(k)) * factorial(n - k))
}

bin_choose(n = 5, k = 2)
bin_choose(5, 0)
bin_choose(5, 1:3)
```

#### bin_probability()

```{r}
#' @title bin_probability
#' @description computes the binomial probability of getting k successes in n trials
#' @param trials number of trials
#' @param success number of successes
#' @param prob probability of success
#' @return computed binomial probability
#' @examples
#' # probability of getting 2 successes in 5 trials
#' # (assuming prob of success = 0.5)
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#' # probabilities of getting 2 or less successes in 5 trials
#' # (assuming prob of success = 0.5)
#' bin_probability(success = 0:2, trials = 5, prob = 0.5)
#' # 55 heads in 100 tosses of a loaded coin with 45% chance of heads
#' bin_probability(success = 55, trials = 100, prob = 0.45)
#' @export

bin_probability <- function(trials, success, prob) {
  check_trials(trials = trials)
  check_prob(prob = prob)
  check_success(success = success, trials = trials)
  bin_choose(n = trials, k = success) * (prob ^ success) * ((1 - prob) ^ (trials - success))
}
```

#### bin_distribution()

```{r}
#' @title bin_distribution
#' @description creates a data frame of binomial distribution with successes in 1st column and probability in the other
#' @param trials number of trials
#' @param prob probability of success
#' @return data frame of the binomial distribution
#' @examples
#' # binomial probability distribution
#' bin_distribution(trials = 5, prob = 0.5)
#' @export

bin_distribution <- function(trials, prob) {
  n <- trials
  p <- prob
  probs <- rep(0, n+1)
  for (k in 0:n) {
    probs[k+1] <- bin_probability(n, k, p)
    }
  df <- data.frame(
    success = 0:n,
    probability = probs
    )
  class(df) <- c("bindis", "data.frame")
  df
}
```

#### bin_cumulative()

```{r}
#' @title bin_cumulative
#' @description creates a data frame of a binomial distribution that lists the successes, the binomial probability, and the cumulative
#' @param trials number of trials
#' @param prob probability of success
#' @return the generated data frame
#' @export

bin_cumulative <- function(trials, prob) {
  n <- trials
  p <- prob
  probs <- rep(0, n+1)
  cum <- rep(0, n+1)
  for (k in 0:n) {
    probs[k+1] <- bin_probability(n, k, p)
  }

  df <- data.frame(
    success = 0:n,
    probability = probs,
    cumulative = cumsum(probs)
    )
  class(df) <- c("bincum", "data.frame")
  df
}
```

#### bin_variable()

```{r}
#' @title bin_variable
#' @description
#' @param trials number of trials
#' @param prob probability of success
#' @return
#' @examples
```


## Methods
#### plot.bindis()

```{r}
#' @export

plot.bindis <- function(x) {
  barplot(x$probability, 
          xlab = "Successes",
          ylab = "Probabiity",
          col = "#6D9DFF",
          names.arg = x$success)
}
```

#### plot.bincum()

```{r}
#' @export

plot.bincum <- function(x) {
  plot(x$cumulative,
       xlab = "Successes",
       ylab = "Probability",
       main = "Binomial Cumulative Distribution",
       col = "#2C67FF",
       type = "o",
       panel.first = grid()
       )
}
```



```{r}
plot(iris$Sepal.L, iris$Sepal.W, col = rep(1:3, rep(50, 3)),
     xlim = c(4, 8), ylim = c(2, 4.5), panel.first = grid())
```

