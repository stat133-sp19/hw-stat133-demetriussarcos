install.packages("devtools")
library(devtools)
devtools::use_testthat()
devtools::use_vignette()
knitr::opts_chunk$set(echo = TRUE)
aux_mode <- functions(trials, prob) {
aux_mode <- function(trials, prob) {
input <- (trials*prob)+prob
m <- floor(input)
if ((input %% 1) != 0) {
output <- m
return(output)
}
return(c(m, m-1))
}
aux_mode(5, 0.5)
aux_mode(10, 0.4)
library(testthat)
aux_mean <- function(prob, trials) {
prob * trials
}
aux_mean(0.5, 5)
aux_mean(10, 0.1)
aux_mean(0.1, 10)
v <- aux_mean(10, 0.3)
class(v)
aux_mean(10, "1/2")
aux_variance <- function(prob, trials) {
trials * prob * (1 - prob)
}
aux_variance(10, "1/2")
aux_mode <- function(trials, prob) {
input <- (trials*prob)+prob
m <- floor(input)
if ((input %% 1) != 0) {
output <- m
return(output)
}
return(c(m, m-1))
}
v <- aux_mode(13, 0.5)
class(v)
v
length(v)
aux_mode(10, "1/2")
aux_skewness <- function(prob, trials) {
(1 - (2 * prob)) / sqrt(trials * prob * (1 - prob))
}
aux_kurtosis <- function(prob, trials) {
(1 - ((6 * prob) * (1 - prob))) / (trials * prob * (1 - prob))
}
aux_skewness(10, "1/2")
devtools::use_vignette("Introduction-to-Binomial")
bin_distribution <- function(trials, prob) {
n <- trials
p <- prob
probs <- rep(0, n+1)
for (k in 0:n) {
probs[k+1] <- bin_probability(n, k, p)
}
df <- data.frame(
success = 0:n,
probability = probs
)
class(df) <- c("bindis", "data.frame")
df
}
d <- bin_distribution(10, 0.5)
bin_probability <- function(trials, success, prob) {
check_trials(trials = trials)
check_prob(prob = prob)
check_success(success = success, trials = trials)
bin_choose(n = trials, k = success) * (prob ^ success) * ((1 - prob) ^ (trials - success))
}
d <- bin_distribution(10, 0.5)
source('~/Stat133/Workouts/binomial/R/functions/checker-functions.R', encoding = 'UTF-8', echo=TRUE)
d <- bin_distribution(10, 0.5)
bin_choose <- function(n, k) {
if (k > n) {
stop("\nk cannot be greater than n")
}
factorial(n) / ((factorial(k)) * factorial(n - k))
}
d <- bin_distribution(10, 0.5)
class(d)
i <- c("bindis", "data.frame")
i
d
names(d)
bin_cumulative(10, 0.5)
bin_cumulative <- function(trials, prob) {
n <- trials
p <- prob
probs <- rep(0, n+1)
cum <- rep(0, n+1)
for (k in 0:n) {
probs[k+1] <- bin_probability(n, k, p)
}
df <- data.frame(
success = 0:n,
probability = probs,
cumulative = cumsum(probs)
)
class(df) <- c("bincum", "data.frame")
df
}
bin_cumulative(10, 0.5)
bin_distribution(10, "1/2")
library(binomial)
bin_probability(10, 0:2, 0.5)
bin_probability <- function(trials, success, prob) {
check_trials(trials = trials)
check_prob(prob = prob)
check_success(success = success, trials = trials)
p <- bin_choose(n = trials, k = success) * (prob ^ success) * ((1 - prob) ^ (trials - success))
if (length(success) >0) {
for (i in 1:length(success)) {
p[i] <- bin_choose(n = trials, k = success[i]) * (prob ^ success) * ((1 - prob) ^ (trials - success))
}
}
return(p)
}
bin_probability(5,0:2, 0.5)
v <- 0:2
for (i in 1:length(v)) {
p[i] <- bin_choose(n = 5, k = v[i]) * (0.5 ^ v[i]) * ((1 - 0.5) ^ (5 - v[i]))
}
p <- rep(0, length(v))
for (i in 1:length(v)) {
p[i] <- bin_choose(n = 5, k = v[i]) * (0.5 ^ v[i]) * ((1 - 0.5) ^ (5 - v[i]))
}
p
bin_probability <- function(trials, success, prob) {
check_trials(trials = trials)
check_prob(prob = prob)
check_success(success = success, trials = trials)
p <- bin_choose(n = trials, k = success) * (prob ^ success) * ((1 - prob) ^ (trials - success))
if (length(success) > 0) {
for (i in 1:length(success)) {
output[i] <- bin_choose(n = trials, k = success[i]) * (prob ^ success[i]) * ((1 - prob) ^ (trials - success[i]))
p <- output
}
}
return(p)
}
bin_probability(5,0:2, 0.5)
bin_probability <- function(trials, success, prob) {
check_trials(trials = trials)
check_prob(prob = prob)
check_success(success = success, trials = trials)
p <- bin_choose(n = trials, k = success) * (prob ^ success) * ((1 - prob) ^ (trials - success))
output <- rep(0, length(success))
if (length(success) > 0) {
for (i in 1:length(success)) {
output[i] <- bin_choose(n = trials, k = success[i]) * (prob ^ success[i]) * ((1 - prob) ^ (trials - success[i]))
p <- output
}
}
return(p)
}
bin_probability(5,0:2, 0.5)
bin_probability <- function(trials, success, prob) {
check_trials(trials = trials)
check_prob(prob = prob)
check_success(success = success, trials = trials)
p <- bin_choose(n = trials, k = success) * (prob ^ success) * ((1 - prob) ^ (trials - success))
output <- rep(0, length(success))
if (length(success) > 1) {
for (i in 1:length(success)) {
output[i] <- bin_choose(n = trials, k = success[i]) * (prob ^ success[i]) * ((1 - prob) ^ (trials - success[i]))
p <- output
}
}
return(p)
}
bin_probability(5,0:2, 0.5)
bin_probability <- function(trials, success, prob) {
check_trials(trials = trials)
check_prob(prob = prob)
check_success(success = success, trials = trials)
p <- bin_choose(n = trials, k = success) * (prob ^ success) * ((1 - prob) ^ (trials - success))
output <- rep(0, length(success))
if (length(success) > 1) {
for (i in 1:length(success)) {
output[i] <- bin_choose(n = trials, k = success[i]) * (prob ^ success[i]) * ((1 - prob) ^ (trials - success[i]))
}
p <- output
}
return(p)
}
bin_probability(5,0:2, 0.5)
v <- 0:2
b <- rep(0, length(v))
for (i in 1:length(v)) {
b[i] <- bin_choose(n = 5, k = v[i]) * (0.5 ^ v[i]) * ((1 - 0.5) ^ (5 - v[i]))
}
b
bin_probability <- function(trials, success, prob) {
check_trials(trials = trials)
check_prob(prob = prob)
check_success(success = success, trials = trials)
p <- bin_choose(n = trials, k = success) * (prob ^ success) * ((1 - prob) ^ (trials - success))
output <- rep(0, length(success))
if (length(success) > 1) {
for (i in 1:length(output)) {
output[i] <- bin_choose(n = trials, k = success[i]) * (prob ^ success[i]) * ((1 - prob) ^ (trials - success[i]))
}
p <- output
}
return(p)
}
bin_probability(5,0:2, 0.5)
v >1
length(v>1)
length(v)>1
bin_distribution(n, p)
# number of trials
n <- 10
# number of successes
k <- 4
# probability of success
p <- 0.6
sample_prob <- bin_probability(trials = n, success = k, prob = p)
sample_prob
bin_distribution(n, p)
tbl <- bin_distribution(n, p)
tbl
plot(tbl)
plot.bindis <- function(x) {
barplot(x$probability,
xlab = "Successes",
ylab = "Probabiity",
col = "#6D9DFF",
names.arg = x$success)
}
plot(tbl)
tbl2 <- bin_cumulative(n,p)
tbl2
plot.bincum <- function(x) {
plot(x$cumulative,
xlab = "Successes",
ylab = "Probability",
main = "Binomial Cumulative Distribution",
col = "#2C67FF",
type = "o",
panel.first = grid()
)
}
plot(tbl2)
print.binvar <- function(x) {
cat(paste('"Binomial Variable"'))
cat("\n\nParameters")
cat("\n-number of trials:", paste(x$trials))
cat("\n-prob of success:", paste(x$prob))
}
summary.binvar <- function(x) {
output <- list(trials = x$trials,
prob = x$prob,
mean = aux_mean(prob = x$prob, trials = x$trials),
variance = aux_variance(prob = x$prob, trials = x$trials),
skewness = aux_skewness(prob = x$prob, trials = x$trials),
kurtosis = aux_kurtosis(prob = x$prob, trials = x$trials))
class(output) <- "summary.binvar"
output
}
print.summary.binvar <- function(x) {
cat(paste('"Summary Binomial"'))
cat("\n\nParameters")
cat("\n-number of trials:", paste(x$trials))
cat("\n-prob of success :", paste(x$prob))
cat("\n\nMeasures")
cat("\n-mean    :", paste(x$mean))
cat("\n-variance:", paste(x$variance))
cat("\n-skewness:", paste(x$skewness))
cat("\n-kurtosis:", paste(x$kurtosis))
}
v <- bin_variable(n, p)
bin_variable <- function(trials, prob) {
check_trials(trials = trials)
check_prob(prob = prob)
output <- list(trials = trials, prob = prob)
class(output) <- "binvar"
output
}
v <- bin_variable(n, p)
summary(v)
install.packages("devtools")
library(devtools)
devtools::document()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build()
devtools::build_vignettes()
devtools::build()
devtools::document()
